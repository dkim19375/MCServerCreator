import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'edu.sc.seis.launch4j' version '2.5.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

mainClassName = 'me.dkim19375.mcservercreator.MCServerCreatorMain'

group 'me.dkim19375'
version '1.0-SNAPSHOT'

final String javafxVersion = '22-ea+11'

sourceCompatibility = targetCompatibility = 11
compileJava.options.encoding = 'UTF-8'

application {
    mainModule.set('MCServerCreator.main')
    mainClass.set(mainClassName)
}

launch4j {
    outfile = "${project.name}-${project.version}.exe"
    mainClassName = project.mainClassName
    copyConfigurable = []
    jar = "../libs/${project.tasks.shadowJar.archiveFileName.get()}"
    version = project.version
    textVersion = project.version
    fileDescription = 'A program to create server files'
    windowTitle = project.version
}

def currentOS = DefaultNativePlatform.currentOperatingSystem
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

java {
    modularity.inferModulePath = true
}

distTar {
    compression = Compression.GZIP
    archiveExtension.set("tar.gz")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'io.github.alekseysotnikov:CmdTool:1.0.1'
    implementation 'org.jetbrains:annotations:+'
    implementation "org.openjfx:javafx-base:$javafxVersion:${platform}"
    implementation "org.openjfx:javafx-controls:$javafxVersion:${platform}"
    implementation "org.openjfx:javafx-graphics:$javafxVersion:${platform}"
    implementation "org.openjfx:javafx-fxml:$javafxVersion:${platform}"
}

shadowJar.finalizedBy createExe
shadowJar.finalizedBy distTar